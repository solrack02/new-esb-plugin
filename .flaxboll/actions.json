{"1723734693799":{"actionType":"saveAll","createdAt":"1723734693799","actionID":"1723734693799","userID":"#TEMP","path":"system.capsules.4b9870cc-139f-45f3-b91c-45a98cab1d76.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Local Tools\nimport { argSel, getCtData } from './src/tools/base/project';\n\nconst css2 =\n  'color: cyan; background-color: #444; font-size: 11px; padding: 2px 6px; border-radius: 3px';\n\n// ---------------- varReader\n// --------------------------\ntype Tprops_varReader = { pass: { path: string[] | string } };\nexport const varReader = (props: Tprops_varReader) => {\n  const { path } = props.pass;\n\n  let newPath = '';\n\n  const isArray = Array.isArray(path);\n  if (isArray) {\n    newPath = path.reduce((prev, curr) => prev + curr, '');\n  } else {\n    newPath = path;\n  }\n  const returnVarValue = getCtData(newPath);\n  console.log('%cvarReader', css2, { varPath: newPath, value: returnVarValue });\n\n  return returnVarValue;\n};\n\n// ---------------- argReader\n// --------------------------\ntype Tprops_argReader = { pass: { argPath: string; args: any } };\nexport const argReader = (props: Tprops_argReader) => {\n  const { argPath, args } = props.pass;\n\n  let newArgPath = '';\n\n  const isArray = Array.isArray(argPath);\n  if (isArray) {\n    newArgPath = argPath.reduce((prev, curr) => prev + curr, '');\n  } else {\n    newArgPath = argPath;\n  }\n  const returnArgValue = argSel(args, newArgPath);\n  console.log('%cargReader', css2, {\n    varPath: newArgPath,\n    value: returnArgValue,\n  });\n\n  return returnArgValue;\n};\n\n// ------------ j3 to joinStringValue\n// ----------------------------------\ntype Tprops_joinStringValue = {\n  pass: { arrayStrings: any; joinSeparator: any };\n};\nexport const joinStringValue = (props: Tprops_joinStringValue) => {\n  const { arrayStrings, joinSeparator } = props.pass;\n\n  return arrayStrings.join(joinSeparator);\n};\n\n// --------- j7 to propJsonStrignify\n// ---------------------------------\ntype Tprops_propJsonStrignify = {\n  pass: { objectProperties: any };\n};\nexport const propJsonStrignify = (props: Tprops_propJsonStrignify) => {\n  const { objectProperties } = props.pass;\n\n  return JSON.stringify(objectProperties);\n};\n\n// ------------------------ Direct Return\n// ---------------------- j8 to freeValue\n// -------- propObj, propString, propArray\n// ---- stringValue, arrayValue, freeValue\ntype Tprops_freeValue = {\n  pass: { propertieValues: any };\n};\nexport const freeValue = (props: Tprops_freeValue) => {\n  const { propertieValues } = props.pass;\n\n  return propertieValues;\n};\n\n// ---------- prop j10 to urlEncoded\n// ---------------------------------\ntype Tprops_urlEncoded = {\n  pass: { objectProperties: {} };\n};\nexport const urlEncoded = (props: Tprops_urlEncoded) => {\n  const { objectProperties } = props.pass;\n\n  return new URLSearchParams(objectProperties);\n};\n\n// ---------------- j12 to toggleVar\n// ---------------------------------\ntype Tprops_toggleVar = { pass: { varToToggle: any; args: any } };\nexport const toggleVar = (props: Tprops_toggleVar) => {\n  const { varToToggle, args } = props.pass;\n\n  return varToToggle;\n};\n","newValue":"// ---------- import Local Tools\nimport { argSel, getCtData } from './src/tools/base/project';\n\nconst css2 =\n  'color: cyan; background-color: #444; font-size: 11px; padding: 2px 6px; border-radius: 3px';\n\n// ---------------- varReader\n// --------------------------\ntype Tprops_varReader = { pass: { path: string[] | string } };\nexport const varReader = (props: Tprops_varReader) => {\n  const { path } = props.pass;\n\n  let newPath = '';\n\n  const isArray = Array.isArray(path);\n  if (isArray) {\n    newPath = path.reduce((prev, curr) => prev + curr, '');\n  } else {\n    newPath = path;\n  }\n  const returnVarValue = getCtData(newPath);\n  console.log('%cvarReader', css2, { varPath: newPath, value: returnVarValue });\n\n  return returnVarValue;\n};\n\n// ---------------- argReader\n// --------------------------\ntype Tprops_argReader = { pass: { argPath: string; args: any } };\nexport const argReader = (props: Tprops_argReader) => {\n  const { argPath, args } = props.pass;\n\n  let newArgPath = '';\n\n  const isArray = Array.isArray(argPath);\n  if (isArray) {\n    newArgPath = argPath.reduce((prev, curr) => prev + curr, '');\n  } else {\n    newArgPath = argPath;\n  }\n  const returnArgValue = argSel(args, newArgPath);\n  console.log('%cargReader', css2, {\n    varPath: newArgPath,\n    value: returnArgValue,\n  });\n\n  return returnArgValue;\n};\n\n// ------------ j3 to joinStringValue\n// ----------------------------------\ntype Tprops_joinStringValue = {\n  pass: { arrayStrings: any; joinSeparator: any };\n};\nexport const joinStringValue = (props: Tprops_joinStringValue) => {\n  const { arrayStrings, joinSeparator } = props.pass;\n\n  return arrayStrings.join(joinSeparator);\n};\n\n// --------- j7 to propJsonStrignify\n// ---------------------------------\ntype Tprops_propJsonStrignify = {\n  pass: { objectProperties: any };\n};\nexport const propJsonStrignify = (props: Tprops_propJsonStrignify) => {\n  const { objectProperties } = props.pass;\n\n  return JSON.stringify(objectProperties);\n};\n\n// ------------------------ Direct Return\n// ---------------------- j8 to freeValue\n// -------- propObj, propString, propArray\n// ---- stringValue, arrayValue, freeValue\ntype Tprops_freeValue = {\n  pass: { propertieValues: any };\n};\nexport const freeValue = (props: Tprops_freeValue) => {\n  const { propertieValues } = props.pass;\n\n  return propertieValues;\n};\n\n// ---------- prop j10 to urlEncoded\n// ---------------------------------\ntype Tprops_urlEncoded = {\n  pass: { objectProperties: {} };\n};\nexport const urlEncoded = (props: Tprops_urlEncoded) => {\n  const { objectProperties } = props.pass;\n\n  return new URLSearchParams(objectProperties);\n};\n\n// ---------------- j12 to toggleVar\n// ---------------------------------\ntype Tprops_toggleVar = { pass: { varToToggle: any; args: any } };\nexport const toggleVar = (props: Tprops_toggleVar) => {\n  const { varToToggle, args } = props.pass;\n\n  return varToToggle;\n};"}}